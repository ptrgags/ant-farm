// Generated by CoffeeScript 1.10.0
(function() {
  var CELL_SIZE, HEIGHT, SPEED, WIDTH;

  WIDTH = 640;

  HEIGHT = 480;

  SPEED = 4;

  CELL_SIZE = 8;

  this.LANGTON = {
    BLACK: ["LEFT", "WHITE", "MOVE"],
    WHITE: ["RIGHT", "BLACK", "MOVE"]
  };

  this.setup = function() {
    var col, cols, row, rows;
    createCanvas(windowWidth, windowHeight);
    rows = Math.floor(windowHeight / CELL_SIZE);
    cols = Math.floor(windowWidth / CELL_SIZE);
    window.grid = (function() {
      var k, ref, results;
      results = [];
      for (row = k = 1, ref = rows; 1 <= ref ? k <= ref : k >= ref; row = 1 <= ref ? ++k : --k) {
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (col = l = 1, ref1 = cols; 1 <= ref1 ? l <= ref1 : l >= ref1; col = 1 <= ref1 ? ++l : --l) {
            results1.push('WHITE');
          }
          return results1;
        })());
      }
      return results;
    })();
    window.ants = [new Ant(50, 50, 0, window.grid, LANGTON, ["MOVE"])];
    return noStroke();
  };

  this.draw = function() {
    var ant, cell, i, j, k, l, len, len1, m, ref, ref1, ref2, results, row, x;
    background('#FFFFFF');
    for (x = k = 1, ref = SPEED; 1 <= ref ? k <= ref : k >= ref; x = 1 <= ref ? ++k : --k) {
      ref1 = window.ants;
      for (l = 0, len = ref1.length; l < len; l++) {
        ant = ref1[l];
        ant.step();
      }
    }
    ref2 = window.grid;
    results = [];
    for (i = m = 0, len1 = ref2.length; m < len1; i = ++m) {
      row = ref2[i];
      results.push((function() {
        var len2, n, results1;
        results1 = [];
        for (j = n = 0, len2 = row.length; n < len2; j = ++n) {
          cell = row[j];
          if (cell !== 'WHITE') {
            fill(Ant.COLOR_CODES[cell]);
            results1.push(rect(j * CELL_SIZE, i * CELL_SIZE, CELL_SIZE, CELL_SIZE));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  this.get_modifier = function() {
    if (keyIsPressed && key === CODED) {
      if (keyCode === SHIFT) {
        return SHIFT;
      } else if (keyCode === ALT) {
        return ALT;
      } else if (keyCode === CONTROL) {
        return CONTROL;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  this.mouseClicked = function() {
    var col, dir, row;
    row = Math.floor(mouseY / CELL_SIZE);
    col = Math.floor(mouseX / CELL_SIZE);
    dir = 0;
    if (mouseButton === LEFT) {
      window.ants.push(new Ant(row, col, dir, window.grid, LANGTON));
    }
    return false;
  };

}).call(this);
