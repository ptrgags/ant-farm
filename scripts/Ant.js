// Generated by CoffeeScript 1.10.0
(function() {
  this.Ant = (function() {
    Ant.MOVEMENTS = [[0, -1], [-1, 0], [0, 1], [1, 0]];

    Ant.COLOR_CODES = {
      white: '#FFFFFF',
      black: '#16001E',
      red: '#C40B37',
      green: '#286639',
      blue: '#275DAD',
      cyan: '#34D1BF',
      yellow: '#FABC3C',
      magenta: '#C34397'
    };

    function Ant(row, col, orientation, grid, code) {
      this.row = row;
      this.col = col;
      this.orientation = orientation;
      this.grid = grid;
      this.rules = new AntRules();
      this.rules.decode(code);
    }

    Ant.prototype.turn = function(amount) {
      var results;
      this.orientation += amount;
      this.orientation %= Ant.MOVEMENTS.length;
      results = [];
      while (this.orientation < 0) {
        results.push(this.orientation += Ant.MOVEMENTS.length);
      }
      return results;
    };

    Ant.prototype.left = function() {
      return this.turn(-1);
    };

    Ant.prototype.right = function() {
      return this.turn(1);
    };

    Ant.prototype.get_color = function() {
      return this.grid[this.row][this.col];
    };

    Ant.prototype.set_color = function(color) {
      return this.grid[this.row][this.col] = color;
    };

    Ant.prototype.move = function() {
      var col_delta, ref, results, row_delta;
      ref = Ant.MOVEMENTS[this.orientation], row_delta = ref[0], col_delta = ref[1];
      this.row += row_delta;
      this.row %= this.grid.length;
      while (this.row < 0) {
        this.row += this.grid.length;
      }
      this.col += col_delta;
      this.col %= this.grid[0].length;
      results = [];
      while (this.col < 0) {
        results.push(this.col += this.grid[0].length);
      }
      return results;
    };

    Ant.prototype.step = function() {
      var current_color, i, len, results, rule, rule_list;
      current_color = this.get_color();
      rule_list = this.rules[current_color];
      if (rule_list.length === 0) {
        rule_list = this.rules["default"];
      }
      results = [];
      for (i = 0, len = rule_list.length; i < len; i++) {
        rule = rule_list[i];
        if (rule === "left") {
          results.push(this.left());
        } else if (rule === "right") {
          results.push(this.right());
        } else if (rule === "forward") {
          results.push(this.move());
        } else if (rule in Ant.COLOR_CODES) {
          results.push(this.set_color(rule));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Ant;

  })();

}).call(this);
