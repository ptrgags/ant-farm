// Generated by CoffeeScript 1.10.0
(function() {
  var CELL_SIZE, COLS, HEIGHT, ROWS, SPEED, WIDTH, ants, col, custom_color, custom_rules, grid, row, type;

  WIDTH = 640;

  HEIGHT = 480;

  SPEED = 8;

  CELL_SIZE = 4;

  ROWS = Math.floor(HEIGHT / CELL_SIZE);

  COLS = Math.floor(WIDTH / CELL_SIZE);

  type = 'langton_ant';

  this.ANT_CODES = {
    langton_ant: "30201100312110003800",
    blue_green_ant: "30201400211300312014002113003220140021130033201400211400342013002113003520140021130036201400211300372014002113003800",
    rainbow_ant: "30201100312112003220130033211400342016003521100036211700372015003800",
    fire_ant: "30201200312112003220120021000000003800",
    fast_ant: "3020110011003121100010003220100012003800",
    box_ant: "300031001500150015210015001500152100150015001521001500150015213500102100102100102100103800",
    bee_ant: "3021160031201000362011003800",
    green_ant: "31201300332111003713003800",
    anti_green_ant: "31201700331700372111003800",
    line_ant: "30210000311333003521210036200000372020003800",
    custom_ant: "3800"
  };

  grid = (function() {
    var k, ref, results;
    results = [];
    for (row = k = 1, ref = ROWS; 1 <= ref ? k <= ref : k >= ref; row = 1 <= ref ? ++k : --k) {
      results.push((function() {
        var l, ref1, results1;
        results1 = [];
        for (col = l = 1, ref1 = COLS; 1 <= ref1 ? l <= ref1 : l >= ref1; col = 1 <= ref1 ? ++l : --l) {
          results1.push('white');
        }
        return results1;
      })());
    }
    return results;
  })();

  ants = [new Ant(50, 50, 0, grid, ANT_CODES.langton_ant)];

  custom_color = "white";

  custom_rules = new AntRules();

  this.update_rules = function(type) {
    var key, ref, results;
    $('td[id|=action]').html("");
    results = [];
    for (key in AntRules.COLOR_CODES) {
      results.push($('#action-' + key).html((ref = custom_rules[key]) != null ? ref.join(", ") : void 0));
    }
    return results;
  };

  this.update_selected_code = function() {
    ANT_CODES.custom_ant = custom_rules.encode();
    return $('#selected-ant').html(ANT_CODES[type]);
  };

  this.onload = function() {
    var append_rule, color;
    update_rules();
    update_selected_code();
    $('input[name=anttype]').change(function(e) {
      type = e.target.value;
      update_rules();
      update_selected_code();
      if (type === "custom_ant") {
        return $('#custom').removeClass('hidden');
      } else {
        return $('#custom').addClass('hidden');
      }
    });
    $('input[name=input-color]').change(function(e) {
      return custom_color = e.target.value;
    });
    $('#clear').click(function() {
      ants = [];
      return grid = (function() {
        var k, ref, results;
        results = [];
        for (row = k = 1, ref = ROWS; 1 <= ref ? k <= ref : k >= ref; row = 1 <= ref ? ++k : --k) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (col = l = 1, ref1 = COLS; 1 <= ref1 ? l <= ref1 : l >= ref1; col = 1 <= ref1 ? ++l : --l) {
              results1.push('white');
            }
            return results1;
          })());
        }
        return results;
      })();
    });
    append_rule = function(rule) {
      return function() {
        custom_rules[custom_color].push(rule);
        update_rules();
        return update_selected_code();
      };
    };
    for (color in AntRules.COLOR_CODES) {
      $("#command-" + color).click(append_rule(color));
    }
    $('#command-forward').click(append_rule("forward"));
    $('#command-left').click(append_rule("left"));
    $('#command-right').click(append_rule("right"));
    $('#command-clear').click(function() {
      custom_rules[custom_color].length = 0;
      update_rules();
      return update_selected_code();
    });
    $('#command-clear-last').click(function() {
      custom_rules[custom_color].pop();
      update_rules();
      return update_selected_code();
    });
    return $('#command-load').click(function() {
      custom_rules.decode(prompt("Enter an ant code:", "3800"));
      update_rules();
      return update_selected_code();
    });
  };

  this.setup = function() {
    createCanvas(WIDTH, HEIGHT);
    return noStroke();
  };

  this.draw = function() {
    var ant, cell, i, j, k, l, len, len1, len2, len3, m, n, o, ref, results, x;
    background('#B58558');
    for (x = k = 1, ref = SPEED; 1 <= ref ? k <= ref : k >= ref; x = 1 <= ref ? ++k : --k) {
      for (l = 0, len = ants.length; l < len; l++) {
        ant = ants[l];
        ant.step();
      }
    }
    for (i = m = 0, len1 = grid.length; m < len1; i = ++m) {
      row = grid[i];
      for (j = n = 0, len2 = row.length; n < len2; j = ++n) {
        cell = row[j];
        if (cell !== 'white') {
          fill(Ant.COLOR_CODES[cell]);
          rect(j * CELL_SIZE, i * CELL_SIZE, CELL_SIZE, CELL_SIZE);
        }
      }
    }
    fill('#FFAA00');
    results = [];
    for (o = 0, len3 = ants.length; o < len3; o++) {
      ant = ants[o];
      results.push(rect(ant.col * CELL_SIZE, ant.row * CELL_SIZE, CELL_SIZE, CELL_SIZE));
    }
    return results;
  };

  this.get_modifier = function() {
    if (keyIsPressed && key === CODED) {
      if (keyCode === SHIFT) {
        return SHIFT;
      } else if (keyCode === ALT) {
        return ALT;
      } else if (keyCode === CONTROL) {
        return CONTROL;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  this.mouseClicked = function() {
    var dir;
    if (mouseX > WIDTH) {
      return;
    }
    if (mouseY > HEIGHT) {
      return;
    }
    row = Math.floor(mouseY / CELL_SIZE);
    col = Math.floor(mouseX / CELL_SIZE);
    dir = 0;
    if (type === "custom_ant") {
      ANT_CODES[type] = custom_rules.encode();
    }
    ants.push(new Ant(row, col, dir, grid, ANT_CODES[type]));
    return false;
  };

}).call(this);
